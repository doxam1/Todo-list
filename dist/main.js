(()=>{var e={208:(e,t,o)=>{"use strict";o.d(t,{A:()=>a});var r=o(354),n=o.n(r),c=o(314),s=o.n(c)()(n());s.push([e.id,"body{margin:0;display:grid;height:100svh;grid-template:1fr 6fr/1fr 4fr;gap:.1rem}body .appHeader{display:flex;justify-content:center;align-items:center}body .menu{grid-area:2/1/-1/2}body .menu #newTodoNote fieldset{display:flex;flex-direction:column;gap:1rem;border:none}body .allProjects{grid-area:1/2/-1/-1}body .allProjects .allProjectsHeader .projectsNavBtns{display:flex;justify-content:flex-start;align-items:center}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn{border:none;cursor:pointer;height:40px;width:120px;border-radius:12px 12px 0px 0px}body .allProjects .ProjectTodoNotes{height:100%;display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem;padding:1rem}body .allProjects .ProjectTodoNotes .nothingToDoH1{opacity:.3}body .allProjects .ProjectTodoNotes .todoDiv{padding:1rem;position:relative}body .allProjects .ProjectTodoNotes .todoDiv .delNoteBtn{position:absolute;top:2%;right:5%}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,KAAK,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,6BAA6B,CAAC,SAAS,CAAC,gBAAgB,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,WAAW,kBAAkB,CAAC,iCAAiC,YAAY,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,mBAAmB,CAAC,sDAAsD,YAAY,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,wEAAwE,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,+BAA+B,CAAC,oCAAoC,WAAW,CAAC,YAAY,CAAC,2DAA2D,CAAC,QAAQ,CAAC,YAAY,CAAC,mDAAmD,UAAU,CAAC,6CAA6C,YAAY,CAAC,iBAAiB,CAAC,yDAAyD,iBAAiB,CAAC,MAAM,CAAC,QAAQ",sourcesContent:["body{margin:0;display:grid;height:100svh;grid-template:1fr 6fr/1fr 4fr;gap:.1rem}body .appHeader{display:flex;justify-content:center;align-items:center}body .menu{grid-area:2/1/-1/2}body .menu #newTodoNote fieldset{display:flex;flex-direction:column;gap:1rem;border:none}body .allProjects{grid-area:1/2/-1/-1}body .allProjects .allProjectsHeader .projectsNavBtns{display:flex;justify-content:flex-start;align-items:center}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn{border:none;cursor:pointer;height:40px;width:120px;border-radius:12px 12px 0px 0px}body .allProjects .ProjectTodoNotes{height:100%;display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem;padding:1rem}body .allProjects .ProjectTodoNotes .nothingToDoH1{opacity:.3}body .allProjects .ProjectTodoNotes .todoDiv{padding:1rem;position:relative}body .allProjects .ProjectTodoNotes .todoDiv .delNoteBtn{position:absolute;top:2%;right:5%}"],sourceRoot:""}]);const a=s},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",r=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),r&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),r&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,r,n,c){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);r&&s[d[0]]||(void 0!==c&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=c),o&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=o):d[2]=o),n&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=n):d[4]="".concat(n)),t.push(d))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),c="/*# ".concat(n," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},72:e=>{"use strict";var t=[];function o(e){for(var o=-1,r=0;r<t.length;r++)if(t[r].identifier===e){o=r;break}return o}function r(e,r){for(var c={},s=[],a=0;a<e.length;a++){var l=e[a],i=r.base?l[0]+r.base:l[0],d=c[i]||0,u="".concat(i," ").concat(d);c[i]=d+1;var p=o(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=n(A,r);r.byIndex=a,t.splice(a,0,{identifier:u,updater:m,references:1})}s.push(u)}return s}function n(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,n){var c=r(e=e||[],n=n||{});return function(e){e=e||[];for(var s=0;s<c.length;s++){var a=o(c[s]);t[a].references--}for(var l=r(e,n),i=0;i<c.length;i++){var d=o(c[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}c=l}}},659:e=>{"use strict";var t={};e.exports=function(e,o){var r=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(o)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,o)=>{"use strict";e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var r="";o.supports&&(r+="@supports (".concat(o.supports,") {")),o.media&&(r+="@media ".concat(o.media," {"));var n=void 0!==o.layer;n&&(r+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),r+=o.css,n&&(r+="}"),o.media&&(r+="}"),o.supports&&(r+="}");var c=o.sourceMap;c&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},743:()=>{let e=new Date,t=e.getDate(),o=e.getMonth()+1,r=e.getFullYear();t<10&&(t="0"+t),o<10&&(o="0"+o),e=r+"-"+o+"-"+t+"T00:00:00",document.getElementById("date").setAttribute("min",e)}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var c=t[r]={id:r,exports:{}};return e[r](c,c.exports,o),c.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0;var r={};(()=>{"use strict";o.d(r,{s:()=>k,X:()=>q});var e=o(72),t=o.n(e),n=o(825),c=o.n(n),s=o(659),a=o.n(s),l=o(56),i=o.n(l),d=o(540),u=o.n(d),p=o(113),A=o.n(p),m=o(208),y={};y.styleTagTransform=A(),y.setAttributes=i(),y.insert=a().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=u(),t()(m.A,y),m.A&&m.A.locals&&m.A.locals;class f{constructor(e,t,o,r,n){this.title=e,this.description=t,this.dueDate=o,this.priority=r,this.project=n}static allTodosNotes=new Array;static allTodosNoteLocalStorage(e){this.allTodosNotes=e||[]}pushToTodoNotes(){f.allTodosNotes.push({title:this.title,description:this.description,dueDate:this.dueDate,priority:this.priority,project:this.project})}deleteFromTodoNotes(){f.allTodosNotes=f.allTodosNotes.filter((e=>this.title!==e.title&&this.description!==e.description))}}function g(e,t,o,r){for(;e.parentElement==document.querySelector(".ProjectTodoNotes");)document.querySelector(".ProjectTodoNotes").removeChild(e);const n=f.allTodosNotes.findIndex((e=>e.title==t&&e.description==o&&e.project==r));f.allTodosNotes.splice(n,1),localStorage.setItem("AllTodoNotes",JSON.stringify(f.allTodosNotes)),k()}o(743);const h=document.getElementById("projectName"),v=document.querySelector(".projectsNavBtns");let C=[];function j(){v.innerHTML='<button class="projectBtn allTodoNotesFromAllProjects"> All Notes </button>\n                                 <button class="projectBtn Default"> Default project </button>',h.innerHTML='<option value="Default" id="DefaultProjectOption">Default</option>\n                             <option value="newProject">New Project...</option>',C.forEach((e=>{const t=document.createElement("option");t.textContent=e,t.setAttribute("value",e),h.insertBefore(t,h.children[0]),h.value=t.value;const o=document.createElement("button");o.textContent=`${e}`,o.classList.add("projectBtn",`${e}`);const r=document.createElement("button");r.textContent="X",o.appendChild(r),v.appendChild(o),r.onclick=()=>{v.removeChild(o),C.splice(C.indexOf(e),1),localStorage.setItem("projectsArray",JSON.stringify(C)),document.querySelectorAll(`.todoDiv.${e}`).forEach((e=>{const t=e.querySelector(".noteTitle").innerHTML,o=e.querySelector(".noteDescription").innerHTML,r=e.querySelector(".noteProjectName").innerHTML.slice(14);g(e,t,o,r)})),j(),q(),k()},q()}))}function N(e){'<h1 class="nothingToDoH1"> nothing To Do... </h1>'==document.querySelector(".ProjectTodoNotes").innerHTML&&(document.querySelector(".ProjectTodoNotes").innerHTML="");const t=document.createElement("div");t.classList.add("todoDiv",`${e.project}`);const o=document.createElement("h1");o.classList.add("noteTitle"),o.textContent=e.title;const r=document.createElement("p");r.classList.add("noteDescription"),r.textContent=e.description;const n=document.createElement("div");n.textContent="Due Date: "+e.dueDate;const c=document.createElement("div");c.textContent="Priority: "+e.priority;const s=document.createElement("div");s.classList.add("noteProjectName"),s.textContent="Project Name: "+e.project;const a=document.createElement("button");a.classList.add("delNoteBtn"),a.textContent="Delete Note";const l=document.createElement("button");l.classList.add("editNoteBtn"),l.textContent="Edit Todo",t.append(l,a,o,r,n,c,s);let i="";switch(e.priority){case"Normal":i="black";break;case"No hurry":i="green";break;case"Super important":i="red"}t.style.boxShadow=`1px 1px 4px 1px ${i}`,a.onclick=()=>{g(t,o.textContent,r.textContent,e.project)},l.onclick=()=>{!function(e,t,o,r,n,c){document.querySelector(".editDialog").showModal();const s=document.querySelector("#editTitle");s.value=e;const a=document.querySelector("#editDescription");a.value=t;const l=document.querySelector("#editDate");l.value=o,document.querySelectorAll('#editTodoNote input[type="radio"]').forEach((e=>{e.value==r&&(e.checked=!0)})),document.querySelector(".editProjectBtn").onclick=o=>{o.preventDefault(),g(c,e,t,n);const r=document.querySelector('#editTodoNote input[type="radio"]:checked').value;new f(s.value,a.value,l.value,r,n).pushToTodoNotes(),localStorage.setItem("AllTodoNotes",JSON.stringify(f.allTodosNotes)),k(),"white"!=document.querySelector(".allTodoNotesFromAllProjects").style.backgroundColor&&document.querySelector(`.${n}`).click(),document.querySelector(".editDialog").close()}}(o.textContent,r.textContent,e.dueDate,e.priority,e.project,t)},document.querySelector(".ProjectTodoNotes").appendChild(t),document.querySelector(".ProjectTodoNotes").style.background="white"}C=JSON.parse(localStorage.getItem("projectsArray"))?JSON.parse(localStorage.getItem("projectsArray")):[],j(),h.addEventListener("change",(e=>{if("newProject"==e.target.value){const e=prompt("enter project name: ");C.push(e),localStorage.setItem("projectsArray",JSON.stringify(C)),j()}}));const T=document.getElementById("title"),b=document.getElementById("description"),x=(document.querySelector("#date"),document.querySelector(".addNewProjectBtn"),document.querySelector(".errorMsg")),S=document.querySelector(".addNewProjectBtn"),B=document.getElementById("title"),P=document.getElementById("description"),D=document.querySelector("#date"),E=document.querySelector("#projectName");function q(){!function(){const e=document.querySelectorAll(".projectBtn");e.forEach((t=>{t.style.backgroundColor="#dfdada",t.style.fontSize="12px",t.style.fontWeight="400",t.style.borderBottom="2px solid black",t.addEventListener("click",(t=>{e.forEach((e=>{e.style.backgroundColor="#dfdada",e.style.fontSize="12px",e.style.fontWeight="400",e.style.borderBottom="2px solid black"})),t.target.style.backgroundColor="white",t.target.style.fontSize="14px",t.target.style.fontWeight="800",t.target.style.borderBottom="2px solid white"}))}))}(),document.querySelectorAll(".projectBtn").forEach((e=>{e.onclick=()=>{document.querySelectorAll(".todoDiv").forEach((t=>{if(e.classList.contains("allTodoNotesFromAllProjects"))return document.querySelector(".ProjectTodoNotes").innerHTML="",f.allTodosNotes.forEach(((e,t)=>{N(f.allTodosNotes[t])})),void(t.style.display="block");const o=e.className.split(" ").slice(-1)[0];document.querySelectorAll(`div.${o}`).forEach((e=>{e.style.display="block"})),t.classList.contains(`${o}`)||(t.style.display="none")}))}}))}function k(){const e=document.querySelector(".ProjectTodoNotes");e.innerHTML="",f.allTodosNoteLocalStorage(JSON.parse(localStorage.getItem("AllTodoNotes"))),0==f.allTodosNotes.length?(e.style.background="no-repeat url('./img/pending.svg') center",e.innerHTML='<h1 class="nothingToDoH1"> nothing To Do... </h1>'):(e.style.background="white",e.innerHTML=""),f.allTodosNotes.forEach(((e,t)=>{N(f.allTodosNotes[t])}))}S.addEventListener("click",(e=>{if(e.preventDefault(),x.style.color="red",x.style.textAlign="center",!(""==T.value?(x.textContent="please enter title",setTimeout((()=>{x.textContent=""}),1e3),0):""!=b.value||(x.textContent="please enter description",setTimeout((()=>{x.textContent=""}),1e3),0)))return;const t=document.querySelector('input[name="priority"]:checked').value;new f(B.value,P.value,D.value,t,E.options[E.selectedIndex].text).pushToTodoNotes(),localStorage.setItem("AllTodoNotes",JSON.stringify(f.allTodosNotes)),N(f.allTodosNotes[f.allTodosNotes.length-1]),document.querySelector(`.${projectName.value}`).click(),B.value="",P.value="",document.querySelector("#normal").checked=!0,q()})),k(),q(),document.getElementById("DefaultProjectOption").selected=!0})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WCxFQUFLVyxjQUFjOUgsT0FBTyxJQUMxRHdELFNBQVNDLGNBQWMsSUFBSTBKLFlBQVkvRCxTQUFTNkIsUUFJaEQsRUFBZ0I3QixNQUFRLEdBQ3hCLEVBQXNCQSxNQUFRLEdBQzlCNUYsU0FBU0MsY0FBYyxXQUFXb0gsU0FBVSxFQUU1Q2YsR0FBUSxJQ3JCWnBCLElBQ0FvQixJQUVBdEcsU0FBU21DLGVBQWUsd0JBQXdCeUgsVUFBVyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21pbkRhdGVUb2RheS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3RvZG9PYmouanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3JlbW92ZU5vdGVGcm9tUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvYWRkTmV3UHJvamVjdE9wdGlvbi5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvYWRkVG9Qcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9lZGl0Tm90ZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZm9ybVZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL25ld1Byb2plY3RIYW5kbGVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdE5hdmJ0bnNTdHlsZU9uQ2xpY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGJvZHl7bWFyZ2luOjA7ZGlzcGxheTpncmlkO2hlaWdodDoxMDBzdmg7Z3JpZC10ZW1wbGF0ZToxZnIgNmZyLzFmciA0ZnI7Z2FwOi4xcmVtfWJvZHkgLmFwcEhlYWRlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Ym9keSAubWVudXtncmlkLWFyZWE6Mi8xLy0xLzJ9Ym9keSAubWVudSAjbmV3VG9kb05vdGUgZmllbGRzZXR7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MXJlbTtib3JkZXI6bm9uZX1ib2R5IC5hbGxQcm9qZWN0c3tncmlkLWFyZWE6MS8yLy0xLy0xfWJvZHkgLmFsbFByb2plY3RzIC5hbGxQcm9qZWN0c0hlYWRlciAucHJvamVjdHNOYXZCdG5ze2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDthbGlnbi1pdGVtczpjZW50ZXJ9Ym9keSAuYWxsUHJvamVjdHMgLmFsbFByb2plY3RzSGVhZGVyIC5wcm9qZWN0c05hdkJ0bnMgYnV0dG9uLnByb2plY3RCdG57Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7aGVpZ2h0OjQwcHg7d2lkdGg6MTIwcHg7Ym9yZGVyLXJhZGl1czoxMnB4IDEycHggMHB4IDBweH1ib2R5IC5hbGxQcm9qZWN0cyAuUHJvamVjdFRvZG9Ob3Rlc3toZWlnaHQ6MTAwJTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgzMDBweCwgMWZyKSk7Z2FwOjFyZW07cGFkZGluZzoxcmVtfWJvZHkgLmFsbFByb2plY3RzIC5Qcm9qZWN0VG9kb05vdGVzIC5ub3RoaW5nVG9Eb0gxe29wYWNpdHk6LjN9Ym9keSAuYWxsUHJvamVjdHMgLlByb2plY3RUb2RvTm90ZXMgLnRvZG9EaXZ7cGFkZGluZzoxcmVtO3Bvc2l0aW9uOnJlbGF0aXZlfWJvZHkgLmFsbFByb2plY3RzIC5Qcm9qZWN0VG9kb05vdGVzIC50b2RvRGl2IC5kZWxOb3RlQnRue3Bvc2l0aW9uOmFic29sdXRlO3RvcDoyJTtyaWdodDo1JX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsS0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLGtCQUFrQixDQUFDLGlDQUFpQyxZQUFZLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsbUJBQW1CLENBQUMsc0RBQXNELFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxrQkFBa0IsQ0FBQyx3RUFBd0UsV0FBVyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLCtCQUErQixDQUFDLG9DQUFvQyxXQUFXLENBQUMsWUFBWSxDQUFDLDJEQUEyRCxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsbURBQW1ELFVBQVUsQ0FBQyw2Q0FBNkMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLHlEQUF5RCxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsUUFBUVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5e21hcmdpbjowO2Rpc3BsYXk6Z3JpZDtoZWlnaHQ6MTAwc3ZoO2dyaWQtdGVtcGxhdGU6MWZyIDZmci8xZnIgNGZyO2dhcDouMXJlbX1ib2R5IC5hcHBIZWFkZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfWJvZHkgLm1lbnV7Z3JpZC1hcmVhOjIvMS8tMS8yfWJvZHkgLm1lbnUgI25ld1RvZG9Ob3RlIGZpZWxkc2V0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjFyZW07Ym9yZGVyOm5vbmV9Ym9keSAuYWxsUHJvamVjdHN7Z3JpZC1hcmVhOjEvMi8tMS8tMX1ib2R5IC5hbGxQcm9qZWN0cyAuYWxsUHJvamVjdHNIZWFkZXIgLnByb2plY3RzTmF2QnRuc3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyfWJvZHkgLmFsbFByb2plY3RzIC5hbGxQcm9qZWN0c0hlYWRlciAucHJvamVjdHNOYXZCdG5zIGJ1dHRvbi5wcm9qZWN0QnRue2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO2hlaWdodDo0MHB4O3dpZHRoOjEyMHB4O2JvcmRlci1yYWRpdXM6MTJweCAxMnB4IDBweCAwcHh9Ym9keSAuYWxsUHJvamVjdHMgLlByb2plY3RUb2RvTm90ZXN7aGVpZ2h0OjEwMCU7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoMzAwcHgsIDFmcikpO2dhcDoxcmVtO3BhZGRpbmc6MXJlbX1ib2R5IC5hbGxQcm9qZWN0cyAuUHJvamVjdFRvZG9Ob3RlcyAubm90aGluZ1RvRG9IMXtvcGFjaXR5Oi4zfWJvZHkgLmFsbFByb2plY3RzIC5Qcm9qZWN0VG9kb05vdGVzIC50b2RvRGl2e3BhZGRpbmc6MXJlbTtwb3NpdGlvbjpyZWxhdGl2ZX1ib2R5IC5hbGxQcm9qZWN0cyAuUHJvamVjdFRvZG9Ob3RlcyAudG9kb0RpdiAuZGVsTm90ZUJ0bntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MiU7cmlnaHQ6NSV9XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG5sZXQgZGQgPSB0b2RheS5nZXREYXRlKCk7XG5sZXQgbW0gPSB0b2RheS5nZXRNb250aCgpICsgMTsgLy9KYW51YXJ5IGlzIDAhXG5sZXQgeXl5eSA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG5cbmlmIChkZCA8IDEwKSB7XG4gICBkZCA9ICcwJyArIGRkO1xufVxuXG5pZiAobW0gPCAxMCkge1xuICAgbW0gPSAnMCcgKyBtbTtcbn0gXG4gICAgXG50b2RheSA9IHl5eXkgKyAnLScgKyBtbSArICctJyArIGRkICsgJ1QwMDowMDowMCc7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhdGVcIikuc2V0QXR0cmlidXRlKFwibWluXCIsIHRvZGF5KTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUb2RvIHtcbiAgICBjb25zdHJ1Y3RvciAodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgcHJvamVjdCkge1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGUsXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbixcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZSxcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5LFxuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0XG4gICAgfVxuICAgIHN0YXRpYyBhbGxUb2Rvc05vdGVzID0gbmV3IEFycmF5KCk7XG5cbiAgICBzdGF0aWMgYWxsVG9kb3NOb3RlTG9jYWxTdG9yYWdlKGZyb21Mb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgaWYgKGZyb21Mb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuYWxsVG9kb3NOb3RlcyA9IGZyb21Mb2NhbFN0b3JhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFsbFRvZG9zTm90ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldCBhbGxUb2Rvc05vdGVzKCkge1xuICAgIC8vICAgICByZXR1cm4gdGhpcy5hbGxUb2Rvc05vdGVzO1xuICAgIC8vIH1cbiAgICBcbiAgICBwdXNoVG9Ub2RvTm90ZXMoKSB7ICAgICAgICBcbiAgICAgICAgVG9kby5hbGxUb2Rvc05vdGVzLnB1c2goe3RpdGxlOnRoaXMudGl0bGUsIGRlc2NyaXB0aW9uOnRoaXMuZGVzY3JpcHRpb24sIGR1ZURhdGU6dGhpcy5kdWVEYXRlLCBwcmlvcml0eTp0aGlzLnByaW9yaXR5LCBwcm9qZWN0OnRoaXMucHJvamVjdH0pO1xuICAgIH1cblxuICAgIGRlbGV0ZUZyb21Ub2RvTm90ZXMoKSB7XG4gICAgICAgIFRvZG8uYWxsVG9kb3NOb3RlcyA9IFRvZG8uYWxsVG9kb3NOb3Rlcy5maWx0ZXIoKGl0ZW0pID0+IHRoaXMudGl0bGUgIT09IGl0ZW0udGl0bGUgJiYgdGhpcy5kZXNjcmlwdGlvbiAhPT0gaXRlbS5kZXNjcmlwdGlvbik7XG4gICAgfVxufVxuXG5cbiIsImV4cG9ydCB7IHJlbW92ZU5vdGVGcm9tUHJvamVjdCB9O1xuaW1wb3J0IFRvZG8gZnJvbSBcIi4vdG9kb09ialwiO1xuaW1wb3J0IHsgb25sb2FkUmVuZGVyaW5nIH0gZnJvbSBcIi5cIjtcblxuZnVuY3Rpb24gcmVtb3ZlTm90ZUZyb21Qcm9qZWN0IChub3RlLCB0aXRsZSwgZGVzY3JpcHRpb24sIHByb2plY3QpIHtcbiAgICBcbiAgIHdoaWxlIChub3RlLnBhcmVudEVsZW1lbnQgPT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLlByb2plY3RUb2RvTm90ZXMnKSkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5Qcm9qZWN0VG9kb05vdGVzJykucmVtb3ZlQ2hpbGQobm90ZSlcbiAgIH07XG5cbiAgICBjb25zdCB0b0JlRGVsZXRlZEluZGV4ID0gVG9kby5hbGxUb2Rvc05vdGVzLmZpbmRJbmRleCh4ID0+IHgudGl0bGUgPT0gdGl0bGUgJiYgeC5kZXNjcmlwdGlvbiA9PSBkZXNjcmlwdGlvbiAmJiB4LnByb2plY3QgPT0gcHJvamVjdCk7IC8vIGknbSBmaW5kaW5nIHRoZSBpbmRleCBvbmx5IGZyb20gdGl0bGUgYW5kIGRlc2NyaXB0aW9uLCBtaWdodCBiZSB0b28gcmlza3kgZm9yIGR1cGxpY2F0aW9uIG9mIG5vdGVzLlxuXG4gICAgVG9kby5hbGxUb2Rvc05vdGVzLnNwbGljZSh0b0JlRGVsZXRlZEluZGV4LCAxKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnQWxsVG9kb05vdGVzJywgSlNPTi5zdHJpbmdpZnkoVG9kby5hbGxUb2Rvc05vdGVzKSk7XG4gICAgb25sb2FkUmVuZGVyaW5nKCk7XG59IiwiY29uc3QgcHJvamVjdE5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdE5hbWUnKTtcbmNvbnN0IHByb2plY3RzTmF2QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0c05hdkJ0bnMnKTtcblxuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJy4vaW5kZXgnXG5pbXBvcnQgVG9kbyBmcm9tICcuL3RvZG9PYmonO1xuaW1wb3J0IHsgcmVtb3ZlTm90ZUZyb21Qcm9qZWN0IH0gZnJvbSAnLi9yZW1vdmVOb3RlRnJvbVByb2plY3QnO1xuaW1wb3J0IHsgb25sb2FkUmVuZGVyaW5nIH0gZnJvbSAnLi9pbmRleCc7XG5cblxuLy8gbWlnaHQgZG8gYSBmYWN0b3J5IGZ1bmN0aW9uIC0gd2lsbCBjaGVjayBmb3IgYSB2YWxpZCBuYW1lIHdpdGggc2V0IGZ1bmN0aW9uLCBhbmQgcmV0cnVuIHRoZSBhcnJheS5cblxubGV0IHByb2plY3RzQXJyYXkgPSBbXTtcblxuaWYgKCFKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0c0FycmF5JykpKSB7XG4gICAgcHJvamVjdHNBcnJheSA9IFtdOyAgICBcbn0gZWxzZSB7XG4gICAgcHJvamVjdHNBcnJheSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RzQXJyYXknKSk7XG59XG4vLyBsb2FkaW5nIGFsbCB0aGUgcHJvamVjdCBmcm9tIGFycmF5IG9uIHBhZ2UgbG9hZC5cbnJlbmRlclByb2plY3RzQXJyYXkoKTtcblxuZnVuY3Rpb24gcmVuZGVyUHJvamVjdHNBcnJheSgpe1xuICAgIHByb2plY3RzTmF2QnRucy5pbm5lckhUTUwgPSBgPGJ1dHRvbiBjbGFzcz1cInByb2plY3RCdG4gYWxsVG9kb05vdGVzRnJvbUFsbFByb2plY3RzXCI+IEFsbCBOb3RlcyA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwcm9qZWN0QnRuIERlZmF1bHRcIj4gRGVmYXVsdCBwcm9qZWN0IDwvYnV0dG9uPmAgICAgXG4gICAgcHJvamVjdE5hbWUuaW5uZXJIVE1MID0gYDxvcHRpb24gdmFsdWU9XCJEZWZhdWx0XCIgaWQ9XCJEZWZhdWx0UHJvamVjdE9wdGlvblwiPkRlZmF1bHQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5ld1Byb2plY3RcIj5OZXcgUHJvamVjdC4uLjwvb3B0aW9uPmBcbiAgICBwcm9qZWN0c0FycmF5LmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICBjb25zdCBuZXdQcm9qZWN0T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIG5ld1Byb2plY3RPcHRpb24udGV4dENvbnRlbnQgPSBwcm9qZWN0O1xuICAgICAgICBuZXdQcm9qZWN0T3B0aW9uLnNldEF0dHJpYnV0ZSAoJ3ZhbHVlJywgcHJvamVjdClcbiAgICAgICAgcHJvamVjdE5hbWUuaW5zZXJ0QmVmb3JlKG5ld1Byb2plY3RPcHRpb24sIHByb2plY3ROYW1lLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgcHJvamVjdE5hbWUudmFsdWUgPSBuZXdQcm9qZWN0T3B0aW9uLnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3ROYXZCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgcHJvamVjdE5hdkJ0bi50ZXh0Q29udGVudCA9IGAke3Byb2plY3R9YFxuICAgICAgICBwcm9qZWN0TmF2QnRuLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3RCdG4nLCBgJHtwcm9qZWN0fWApO1xuXG4gICAgICAgIGNvbnN0IGRlbEJ0bkZvclByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgZGVsQnRuRm9yUHJvamVjdC50ZXh0Q29udGVudCA9ICdYJztcbiAgICAgICAgcHJvamVjdE5hdkJ0bi5hcHBlbmRDaGlsZChkZWxCdG5Gb3JQcm9qZWN0KTtcblxuICAgICAgICBwcm9qZWN0c05hdkJ0bnMuYXBwZW5kQ2hpbGQocHJvamVjdE5hdkJ0bik7XG4gICAgICAgIGRlbEJ0bkZvclByb2plY3Qub25jbGljayA9KCk9PntcbiAgICAgICAgICAgIHByb2plY3RzTmF2QnRucy5yZW1vdmVDaGlsZChwcm9qZWN0TmF2QnRuKTtcbiAgICAgICAgICAgIHByb2plY3RzQXJyYXkuc3BsaWNlKHByb2plY3RzQXJyYXkuaW5kZXhPZihwcm9qZWN0KSwgMSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHNBcnJheScsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQXJyYXkpKTtcblxuICAgICAgICAgICAgY29uc3QgdG9kb0RpdlNhbWVBc1Byb2plY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAudG9kb0Rpdi4ke3Byb2plY3R9YCk7XG4gICAgICAgICAgICB0b2RvRGl2U2FtZUFzUHJvamVjdC5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdG9kby5xdWVyeVNlbGVjdG9yKCcubm90ZVRpdGxlJykuaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdG9kby5xdWVyeVNlbGVjdG9yKCcubm90ZURlc2NyaXB0aW9uJykuaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSB0b2RvLnF1ZXJ5U2VsZWN0b3IoJy5ub3RlUHJvamVjdE5hbWUnKS5pbm5lckhUTUwuc2xpY2UoMTQpO1xuICAgICAgICAgICAgICAgIHJlbW92ZU5vdGVGcm9tUHJvamVjdCh0b2RvLCB0aXRsZSwgZGVzY3JpcHRpb24sIHByb2plY3QpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmVuZGVyUHJvamVjdHNBcnJheSgpO1xuICAgICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgICAgICBvbmxvYWRSZW5kZXJpbmcoKTtcbiAgICAgICAgICAgIC8vIGxvY2F0aW9uLnJlbG9hZCgpOyAvLyB3aHkgb25seSB0aGlzIHdvcmtzPyBpIHdhbnQgdG8gcmVsb2FkIHRoZSBwYWdlIHdpdGggdGhlIG5ldyB0b2RvJ3MgYWZ0ZXIgaSBkZWxldGUgYSBwcm9qZWN0IG5hdiBidG4gd2l0aCBhbGwgdGhlIG5vdGVzIGluIGl0LlxuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyKCk7XG5cbn0pXG59XG5cblxuLy8gYWRkZGluZyBuZXcgcHJvamVjdC4gaSBjYW4ganVzdCBwdXNoIHRoZSBuZXcgcHJvamVjdCB0byB0aGUgYXJyYXkgYW5kIHRoZSByZW5kZXIgdGhlIGZ1bmN0aW9uIGFib3ZlLiBeXG5wcm9qZWN0TmFtZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4geyBcbiAgICBpZiAoZS50YXJnZXQudmFsdWUgPT0gJ25ld1Byb2plY3QnKSB7XG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3ROYW1lID0gcHJvbXB0KCdlbnRlciBwcm9qZWN0IG5hbWU6ICcpO1xuXG4gICAgICAgIC8vYWRkIHZhbGlkYXRlIG5hbWUsIHB1c2ggdG8gYXJyYXksIHNhdmUgYXJyYXkgbG9jYWwgc3RvcmFnZT8gY2hhbmdlIHByb21wdCB0byBEb20gZWxlbWVudC5cblxuICAgICAgICBwcm9qZWN0c0FycmF5LnB1c2gobmV3UHJvamVjdE5hbWUpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHNBcnJheScsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzQXJyYXkpKTsgLy8gc2VuZCB0byBsb2NhbCBzdG9yYWdlIGFmdGVyIGNoYW5nZS5cblxuICAgICAgICByZW5kZXJQcm9qZWN0c0FycmF5KCk7XG4gICAgfX0pO1xuXG5cblxuLy8gaSB3aWxsIG5lZWQgdG8gbWFrZSBhbiBvYmplY3QgY29uc3RydWN0b3IvY2xhc3MvZmFjdG9yeSBmdW5jdGlvbiBmb3IgbWFraW5nIHRoZSBuYXYgcHJvamVjdCBidG5zIGFwcGVuZCB0byBhbiBhcnJheT9cbi8vIG9yIG1heWJlIGp1c3QgYW4gYXJyYXkgb2Ygc29tZXNvcnQuXG4vLyBpJ2xsIGFsc28gbmVlZCB0byBtYWtlIGFuIGFycmF5IG9uIHRoZSBvcHRpb25zIG1hbnUgaW4gdGhlIGZvcm0gZm9yIHRoZSBwcm9qZWN0cy5cblxuXG4iLCJpbXBvcnQgeyByZW1vdmVOb3RlRnJvbVByb2plY3QgfSBmcm9tIFwiLi9yZW1vdmVOb3RlRnJvbVByb2plY3RcIjtcbmltcG9ydCBlZGl0Tm90ZSBmcm9tIFwiLi9lZGl0Tm90ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBZGRUb1Byb2plY3QoTmV3VG9kbykge1xuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuUHJvamVjdFRvZG9Ob3RlcycpLmlubmVySFRNTCA9PSAnPGgxIGNsYXNzPVwibm90aGluZ1RvRG9IMVwiPiBub3RoaW5nIFRvIERvLi4uIDwvaDE+Jykge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuUHJvamVjdFRvZG9Ob3RlcycpLmlubmVySFRNTCA9ICcnO1xuICAgIH1cbiAgICBjb25zdCBuZXdUb2RvRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7ICAgXG4gICAgbmV3VG9kb0Rpdi5jbGFzc0xpc3QuYWRkKCd0b2RvRGl2JywgYCR7TmV3VG9kby5wcm9qZWN0fWApO1xuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoJ25vdGVUaXRsZScpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gTmV3VG9kby50aXRsZTtcblxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGRlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoJ25vdGVEZXNjcmlwdGlvbicpXG4gICAgZGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBOZXdUb2RvLmRlc2NyaXB0aW9uO1xuXG4gICAgY29uc3QgZHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGR1ZURhdGUudGV4dENvbnRlbnQgPSAnRHVlIERhdGU6ICcgKyBOZXdUb2RvLmR1ZURhdGU7XG5cbiAgICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHByaW9yaXR5LnRleHRDb250ZW50ID0gJ1ByaW9yaXR5OiAnICsgTmV3VG9kby5wcmlvcml0eTtcblxuICAgIGNvbnN0IHByb2plY3ROYW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcHJvamVjdE5hbWVEaXYuY2xhc3NMaXN0LmFkZCgnbm90ZVByb2plY3ROYW1lJylcbiAgICBwcm9qZWN0TmFtZURpdi50ZXh0Q29udGVudCA9ICdQcm9qZWN0IE5hbWU6ICcgKyBOZXdUb2RvLnByb2plY3Q7XG5cbiAgICBjb25zdCBkZWxOb3RlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgZGVsTm90ZUJ0bi5jbGFzc0xpc3QuYWRkKCdkZWxOb3RlQnRuJyk7XG4gICAgZGVsTm90ZUJ0bi50ZXh0Q29udGVudCA9ICdEZWxldGUgTm90ZSdcblxuICAgIGNvbnN0IGVkaXROb3RlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgZWRpdE5vdGVCdG4uY2xhc3NMaXN0LmFkZCgnZWRpdE5vdGVCdG4nKTtcbiAgICBlZGl0Tm90ZUJ0bi50ZXh0Q29udGVudCA9ICdFZGl0IFRvZG8nO1xuXG4gICAgbmV3VG9kb0Rpdi5hcHBlbmQoZWRpdE5vdGVCdG4sIGRlbE5vdGVCdG4sIHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIHByb2plY3ROYW1lRGl2KTtcblxuICAgIGxldCBkaXZCb3JkZXJDb2xvckZyb21Qcmlvcml0eSA9ICcnO1xuICAgIHN3aXRjaCAoTmV3VG9kby5wcmlvcml0eSkge1xuICAgICAgICBjYXNlICdOb3JtYWwnOlxuICAgICAgICAgICAgZGl2Qm9yZGVyQ29sb3JGcm9tUHJpb3JpdHkgPSAnYmxhY2snO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ05vIGh1cnJ5JzpcbiAgICAgICAgICAgIGRpdkJvcmRlckNvbG9yRnJvbVByaW9yaXR5ID0gJ2dyZWVuJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTdXBlciBpbXBvcnRhbnQnOlxuICAgICAgICAgICAgZGl2Qm9yZGVyQ29sb3JGcm9tUHJpb3JpdHkgPSAncmVkJztcbiAgICAgICAgICAgIGJyZWFrOyAgICBcbiAgICAgICAgLy9kZWZhdWx0OlxuICAgICAgICAvLyAgICBicmVhaztcbiAgICB9XG4gICAgbmV3VG9kb0Rpdi5zdHlsZS5ib3hTaGFkb3cgPSBgMXB4IDFweCA0cHggMXB4ICR7ZGl2Qm9yZGVyQ29sb3JGcm9tUHJpb3JpdHl9YDtcblxuICAgIGRlbE5vdGVCdG4ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgcmVtb3ZlTm90ZUZyb21Qcm9qZWN0KG5ld1RvZG9EaXYsIHRpdGxlLnRleHRDb250ZW50LCBkZXNjcmlwdGlvbi50ZXh0Q29udGVudCwgTmV3VG9kby5wcm9qZWN0KTtcbiAgICB9XG5cbiAgICBlZGl0Tm90ZUJ0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICBlZGl0Tm90ZSh0aXRsZS50ZXh0Q29udGVudCwgZGVzY3JpcHRpb24udGV4dENvbnRlbnQsIE5ld1RvZG8uZHVlRGF0ZSwgTmV3VG9kby5wcmlvcml0eSwgTmV3VG9kby5wcm9qZWN0LCBuZXdUb2RvRGl2KTtcbiAgICB9XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLlByb2plY3RUb2RvTm90ZXMnKS5hcHBlbmRDaGlsZChuZXdUb2RvRGl2KTtcblxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IFByb2plY3RUb2RvTm90ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuUHJvamVjdFRvZG9Ob3RlcycpOyAgICAgICAgXG4gICAgICAgIFByb2plY3RUb2RvTm90ZXMuc3R5bGUuYmFja2dyb3VuZCA9ICd3aGl0ZSc7XG4gICAgfSkoKTtcblxuICAgIC8vIHRvIGNoYW5nZSB0byB1c2luZyB0aGUgb2JqZWN0IGluc3RlYWRcbn1cblxuXG4vL2FkZCBzb21lIHN0eWxpbmcgdG8gY2xpY2tlZCBwcm9qZWN0QnRuIHdoZW4gaXQncyBjbGlja2VkLlxuXG4vLyBpIG5lZWQgdG8gYnVpbGQgYmFzaWMgdG9kbyBub3RlIHRhbXBsYXRlIGFuZCBpbmplY3QgdG8gaXQgdGhlIG5ldyB0b2RvIG5vdGUgZXZlcnkgdGltZS4gdXNpbmcgdmFyaWFibGVzLiIsImltcG9ydCB7IHJlbW92ZU5vdGVGcm9tUHJvamVjdCB9IGZyb20gJy4vcmVtb3ZlTm90ZUZyb21Qcm9qZWN0LmpzJztcbmltcG9ydCBUb2RvIGZyb20gJy4vdG9kb09iaic7XG5pbXBvcnQgeyBvbmxvYWRSZW5kZXJpbmcgfSBmcm9tICcuL2luZGV4LmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZGl0Tm90ZSh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBwcm9qZWN0LCBuZXdUb2RvRGl2KSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXREaWFsb2cnKS5zaG93TW9kYWwoKTtcblxuICAgIGNvbnN0IGVkaXRUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0VGl0bGUnKTtcbiAgICBlZGl0VGl0bGUudmFsdWUgPSB0aXRsZTtcblxuICAgIGNvbnN0IGVkaXREZXNjcmlwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0RGVzY3JpcHRpb24nKTtcbiAgICBlZGl0RGVzY3JpcHRpb24udmFsdWUgPSBkZXNjcmlwdGlvbjtcblxuICAgIGNvbnN0IGVkaXREYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VkaXREYXRlJyk7XG4gICAgZWRpdERhdGUudmFsdWUgPSBkdWVEYXRlO1xuXG4gICAgY29uc3QgZWRpdFByaW9yaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2VkaXRUb2RvTm90ZSBpbnB1dFt0eXBlPVwicmFkaW9cIl0nKTtcbiAgICBlZGl0UHJpb3JpdHkuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICBpZiAob3B0aW9uLnZhbHVlID09IHByaW9yaXR5KVxuICAgICAgICBvcHRpb24uY2hlY2tlZCA9IHRydWU7XG4gICAgfSlcbiAgICBcbiAgICBcbiAgICBjb25zdCBlZGl0UHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lZGl0UHJvamVjdEJ0bicpO1xuICAgIGVkaXRQcm9qZWN0QnRuLm9uY2xpY2sgPSAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJlbW92ZU5vdGVGcm9tUHJvamVjdChuZXdUb2RvRGl2LCB0aXRsZSwgZGVzY3JpcHRpb24sIHByb2plY3QpO1xuXG4gICAgICAgIGNvbnN0IGVkaXRQcmlvcml0eUNoZWNrZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZWRpdFRvZG9Ob3RlIGlucHV0W3R5cGU9XCJyYWRpb1wiXTpjaGVja2VkJykudmFsdWU7XG5cbiAgICAgICAgbmV3IFRvZG8oZWRpdFRpdGxlLnZhbHVlLCBlZGl0RGVzY3JpcHRpb24udmFsdWUsIGVkaXREYXRlLnZhbHVlLCBlZGl0UHJpb3JpdHlDaGVja2VkLCBwcm9qZWN0KS5wdXNoVG9Ub2RvTm90ZXMoKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0FsbFRvZG9Ob3RlcycsIEpTT04uc3RyaW5naWZ5KFRvZG8uYWxsVG9kb3NOb3RlcykpO1xuICAgICAgICBvbmxvYWRSZW5kZXJpbmcoKTtcblxuICAgICAgICBpZiAoIShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWxsVG9kb05vdGVzRnJvbUFsbFByb2plY3RzJykuc3R5bGUuYmFja2dyb3VuZENvbG9yID09ICd3aGl0ZScpKSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtwcm9qZWN0fWApLmNsaWNrKCk7XG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXREaWFsb2cnKS5jbG9zZSgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cbi8qIDxkaWFsb2cgY2xhc3M9XCJlZGl0RGlhbG9nXCI+XG4gICAgICAgICAgICAgICAgPGZvcm0gaWQ9XCJlZGl0VG9kb05vdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxlZ2VuZD4gPGgyPiBBZGQgTmV3IE5vdGUgPC9oMj48L2xlZ2VuZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJlZGl0VGl0bGVcIj4gVGl0bGUgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVkaXRUaXRsZVwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiZWRpdERlc2NyaXB0aW9uXCI+IEVudGVyIGFzc2lnbm1lbnQgZGVzY3JpcHRpb246IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhICBpZD1cImVkaXREZXNjcmlwdGlvblwiIG5hbWU9XCJkZXNjcmlwdGlvblwiIHJvd3M9XCI4XCIgY29scz1cIjI4XCI+PC90ZXh0YXJlYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImVkaXREYXRlXCI+IGR1ZSBkYXRlOiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBpZD1cImVkaXREYXRlXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+IGhvdyBpbXBvcnRhbnQgaXMgaXQ/IDwvbGVnZW5kPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJlZGl0U3VwZXJcIj4gU3VwZXIgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInByaW9yaXR5XCIgaWQ9XCJlZGl0U3VwZXJcIiB2YWx1ZT1cIlN1cGVyIGltcG9ydGFudFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImVkaXROb3JtYWxcIj4gTm9ybWFsIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJwcmlvcml0eVwiIGlkPVwiZWRpdE5vcm1hbFwiIHZhbHVlPVwiTm9ybWFsXCIgY2hlY2tlZCAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJFZGl0Tm9IdXJyeVwiPiBObyBodXJyeSA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicHJpb3JpdHlcIiBpZD1cIkVkaXROb0h1cnJ5XCIgdmFsdWU9XCJObyBodXJyeVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiZWRpdFByb2plY3RCdG5cIj4gT2sgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZXJyb3JNc2dcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XG5cbiAgICAgICAgICAgIDwvZGlhbG9nPiAqLyIsImNvbnN0IE5ld1Byb2plY3RUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpO1xuY29uc3QgTmV3UHJvamVjdERlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJyk7XG5jb25zdCBOZXdQcm9qZWN0RHVlRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkYXRlJyk7XG5jb25zdCBhZGROZXdQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZE5ld1Byb2plY3RCdG4nKTtcbmNvbnN0IGVycm9yTXNnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVycm9yTXNnJyk7XG5leHBvcnQgeyB2YWxpZGF0ZUZvcm0gfTtcblxuZnVuY3Rpb24gdmFsaWRhdGVGb3JtKCkge1xuICAgIGVycm9yTXNnLnN0eWxlLmNvbG9yID0gJ3JlZCc7XG4gICAgZXJyb3JNc2cuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgaWYgKE5ld1Byb2plY3RUaXRsZS52YWx1ZSA9PSAnJykge1xuICAgICAgICBlcnJvck1zZy50ZXh0Q29udGVudCA9ICdwbGVhc2UgZW50ZXIgdGl0bGUnO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gJyc7ICAgICAgICAgICAgXG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChOZXdQcm9qZWN0RGVzY3JpcHRpb24udmFsdWUgPT0gJycpIHtcbiAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSAncGxlYXNlIGVudGVyIGRlc2NyaXB0aW9uJztcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBlcnJvck1zZy50ZXh0Q29udGVudCA9ICcnOyAgICAgICAgICAgIFxuICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gXG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuXG4iLCJpbXBvcnQgQWRkVG9Qcm9qZWN0IGZyb20gXCIuL2FkZFRvUHJvamVjdFwiO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyB2YWxpZGF0ZUZvcm0gfSBmcm9tICcuL2Zvcm1WYWxpZGF0aW9uJztcbmltcG9ydCBUb2RvIGZyb20gXCIuL3RvZG9PYmpcIjtcblxuY29uc3QgYWRkTmV3UHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGROZXdQcm9qZWN0QnRuJyk7XG5cblxuY29uc3QgTmV3UHJvamVjdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJyk7XG5jb25zdCBOZXdQcm9qZWN0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzY3JpcHRpb24nKTtcbmNvbnN0IE5ld1Byb2plY3REdWVEYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RhdGUnKTtcbmNvbnN0IE5ld1Byb2plY3ROYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0TmFtZVwiKTtcblxuXG4vLyBoZXJlIGkgbmVlZCB0byB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uL29iamVjdCBjb25zdHJ1Y3Rvci9jbGFzcyBtYWtlIGFuIG9iamVjdCBmcm9tIGFueSB0b2RvIHVzZXIgc3VibWl0cy5cbi8vIHRoZSBuZXcgb2JqZWN0IHN1Ym1pdCB3aWxsIGdvIHRvIGFuIGFycmF5IG9mIG9iamVjdHMgLSBvbiB0aGUgYXJyYXkgaSBjYW4gdXNlIGFycmF5IG1ldGhvZHMgdG8gZGVsZXRlLCBwdXNoIGV0Yy4uLlxuLy8gaSB3aWxsIG5lZWQgdG8gcmVuZGVyIHRoZSBhcnJheSB3aXRoIGZvci4uLmluIGxvb3AgZm9yIGVhY2ggdG9kbyBub3RlcyBvbiBhbnkgY2hhbmdlIG9yIHdoZW4gcGFnZSBsb2FkZXMgdXNpbmcgZGF0YSBzYXZpbmcgbWV0aG9kcy5cblxuXG5hZGROZXdQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCF2YWxpZGF0ZUZvcm0oKSkgcmV0dXJuO1xuICAgIGNvbnN0IG5ld1Byb2plY3RJbXBvcnRhbmNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInByaW9yaXR5XCJdOmNoZWNrZWQnKS52YWx1ZTsgLy8vIG5lZWQgdG8gZ2V0IGl0IGFmdGVyIHVzZXIgcHJlc3MgYW5kIGNoYW5nZSBwcmlvcml0eSAtIG5vdCBvbiBsb2FkLiAgICBcbiAgICBuZXcgVG9kbyhOZXdQcm9qZWN0VGl0bGUudmFsdWUsIE5ld1Byb2plY3REZXNjcmlwdGlvbi52YWx1ZSwgTmV3UHJvamVjdER1ZURhdGUudmFsdWUsbmV3UHJvamVjdEltcG9ydGFuY2UsTmV3UHJvamVjdE5hbWUub3B0aW9uc1tOZXdQcm9qZWN0TmFtZS5zZWxlY3RlZEluZGV4XS50ZXh0KS5wdXNoVG9Ub2RvTm90ZXMoKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnQWxsVG9kb05vdGVzJywgSlNPTi5zdHJpbmdpZnkoVG9kby5hbGxUb2Rvc05vdGVzKSk7XG4gICAgQWRkVG9Qcm9qZWN0KFRvZG8uYWxsVG9kb3NOb3Rlc1tUb2RvLmFsbFRvZG9zTm90ZXMubGVuZ3RoLTFdKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtwcm9qZWN0TmFtZS52YWx1ZX1gKS5jbGljaygpOyAvLyBjbGljayBpcyB3b3JraW5nLlxuXG5cbiAgICAvLyBkZWxldGUgZm9ybSBhZnRlciBzdWJtaXRpbmcgbmV3IG5vdGUgdG8gcHJvamVjdC5cbiAgICBOZXdQcm9qZWN0VGl0bGUudmFsdWUgPSAnJztcbiAgICBOZXdQcm9qZWN0RGVzY3JpcHRpb24udmFsdWUgPSAnJztcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbm9ybWFsJykuY2hlY2tlZCA9IHRydWU7XG5cbiAgICByZW5kZXIoKTtcbn0pXG4iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCBUb2RvIGZyb20gJy4vdG9kb09iaic7XG5pbXBvcnQgXCIuL21pbkRhdGVUb2RheVwiO1xuaW1wb3J0IFwiLi9hZGROZXdQcm9qZWN0T3B0aW9uXCJcbi8vIGltcG9ydCBkZWZhdWx0UHJvamVjdCBmcm9tICcuL2FkZFRvUHJvamVjdCc7XG5pbXBvcnQgJy4vbmV3UHJvamVjdEhhbmRsZXInO1xuaW1wb3J0IEFkZFRvUHJvamVjdCBmcm9tICcuL2FkZFRvUHJvamVjdCc7XG5pbXBvcnQgcHJvamVjdE5hdkJ0bkNvbG9yIGZyb20gJy4vcHJvamVjdE5hdmJ0bnNTdHlsZU9uQ2xpY2snO1xuXG5cbmV4cG9ydCB7IG9ubG9hZFJlbmRlcmluZyB9O1xuZXhwb3J0IHsgcmVuZGVyIH07XG5cbm9ubG9hZFJlbmRlcmluZygpO1xucmVuZGVyKCk7XG4vLyBpIHdhbnQgZGVmYXVsdCBwcm9qZWN0IHRvIGJlIHNlbGVjdGVkIG9uIHRoZSBkcm9wZG93biBtZW51IG9mIHByb2plY3QgbmFtZXMuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnRGVmYXVsdFByb2plY3RPcHRpb24nKS5zZWxlY3RlZCA9IHRydWU7XG5cblxuXG4vLyBjb25zb2xlLmxvZyhUb2RvLmFsbFRvZG9zTm90ZXMpXG4vLyB0aGUgcmVuZGVyIHdpbGwgbmVlZCB0byBjaGFuZ2Ugc28gaSBjYW4gbG9vcCB0aHJ1IHRoZSB0b2RvIGFycmF5IGFuZCByZW5kZXIgaXQgYWdhaW4gb24gZXZlcnkgY2hhbmdlLlxuXG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcHJvamVjdE5hdkJ0bkNvbG9yKClcbiAgICBsZXQgcHJvamVjdEhlYWRlckJ0bkxpYnJhcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdEJ0bicpO1xuICAgIHByb2plY3RIZWFkZXJCdG5MaWJyYXJ5LmZvckVhY2goKHByb2plY3RCdG4pPT57XG4gICAgcHJvamVjdEJ0bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2RvRGl2c1RvdGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvZG9EaXYnKTtcbiAgICAgICAgdG9kb0RpdnNUb3RhbC5mb3JFYWNoKCh0b2RvRGl2KT0+e1xuICAgICAgICAgICAgaWYgKHByb2plY3RCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdhbGxUb2RvTm90ZXNGcm9tQWxsUHJvamVjdHMnKSl7XG4gICAgICAgICAgICAgICAgY29uc3QgUHJvamVjdFRvZG9Ob3RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5Qcm9qZWN0VG9kb05vdGVzJyk7XG4gICAgICAgICAgICAgICAgUHJvamVjdFRvZG9Ob3Rlcy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgICAgICBUb2RvLmFsbFRvZG9zTm90ZXMuZm9yRWFjaCgodG9kbywgaW5kZXgpID0+IHsgICAgICAgIFxuICAgICAgICAgICAgICAgIEFkZFRvUHJvamVjdChUb2RvLmFsbFRvZG9zTm90ZXNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9KSAgICBcbiAgICAgICAgICAgICAgICB0b2RvRGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RCdG5MYXN0Q2xhc3NOYW1lID0gcHJvamVjdEJ0bi5jbGFzc05hbWUuc3BsaXQoJyAnKS5zbGljZSgtMSlbMF07XG4gICAgICAgICAgICBjb25zdCB0b2RvRGl2c1NhbWVDbGFzc0FzUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYGRpdi4ke3Byb2plY3RCdG5MYXN0Q2xhc3NOYW1lfWApO1xuICAgICAgICAgICAgdG9kb0RpdnNTYW1lQ2xhc3NBc1Byb2plY3RCdG4uZm9yRWFjaCgodG9kb05vdGUpID0+e1xuICAgICAgICAgICAgICAgIHRvZG9Ob3RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghdG9kb0Rpdi5jbGFzc0xpc3QuY29udGFpbnMoYCR7cHJvamVjdEJ0bkxhc3RDbGFzc05hbWV9YCkpIHtcbiAgICAgICAgICAgICAgICB0b2RvRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB9XG4gICAgfSl9fSlcbn1cblxuXG4vLyB0aGlzIGZ1bmN0aW9uIGlzIGZvciByZW5kZXJpbmcgYSBzYXZlZCB2ZXJzaW9uIG9mIHRoZSBvYmplY3Qgb2YgdG9kbydzLiBuZWVkIHRvIGxlYXJuIGFib3V0IGxvY2FsIHN0b3JhZ2UgKyBzYXZpbmcgdGhlIGxpYnJhcnkgZnVuY3Rpb25zLlxuXG4vLyBjb25zdCByZW5kZXJCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWxsVG9kb05vdGVzRnJvbUFsbFByb2plY3RzJyk7ICBcbmZ1bmN0aW9uIG9ubG9hZFJlbmRlcmluZygpIHtcbiAgICBjb25zdCBQcm9qZWN0VG9kb05vdGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLlByb2plY3RUb2RvTm90ZXMnKTtcbiAgICBQcm9qZWN0VG9kb05vdGVzLmlubmVySFRNTCA9ICcnO1xuICAgIFRvZG8uYWxsVG9kb3NOb3RlTG9jYWxTdG9yYWdlKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0FsbFRvZG9Ob3RlcycpKSk7XG4gICAgLy8gY29uc29sZS5sb2coVG9kby5hbGxUb2Rvc05vdGVzKVxuICAgIGlmIChUb2RvLmFsbFRvZG9zTm90ZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgUHJvamVjdFRvZG9Ob3Rlcy5zdHlsZS5iYWNrZ3JvdW5kID0gXCJuby1yZXBlYXQgdXJsKCcuL2ltZy9wZW5kaW5nLnN2ZycpIGNlbnRlclwiO1xuICAgICAgICBQcm9qZWN0VG9kb05vdGVzLmlubmVySFRNTCA9ICc8aDEgY2xhc3M9XCJub3RoaW5nVG9Eb0gxXCI+IG5vdGhpbmcgVG8gRG8uLi4gPC9oMT4nXG5cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIFByb2plY3RUb2RvTm90ZXMuc3R5bGUuYmFja2dyb3VuZCA9ICd3aGl0ZSc7XG4gICAgICAgIFByb2plY3RUb2RvTm90ZXMuaW5uZXJIVE1MID0gJyc7XG4gICAgfVxuICAgIFRvZG8uYWxsVG9kb3NOb3Rlcy5mb3JFYWNoKCh0b2RvLCBpbmRleCkgPT4geyAgICAgICAgXG4gICAgICAgIEFkZFRvUHJvamVjdChUb2RvLmFsbFRvZG9zTm90ZXNbaW5kZXhdKTtcbiAgICB9KVxufVxuXG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2plY3ROYXZCdG5Db2xvcigpe1xuICAgIGNvbnN0IHByb2plY3RCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3RCdG4nKTtcbiAgICBwcm9qZWN0QnRucy5mb3JFYWNoKGJ0biA9PiB7XG4gICAgICAgIGJ0bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2RmZGFkYSc7XG4gICAgICAgIGJ0bi5zdHlsZS5mb250U2l6ZSA9ICcxMnB4JztcbiAgICAgICAgYnRuLnN0eWxlLmZvbnRXZWlnaHQgPSAnNDAwJztcbiAgICAgICAgYnRuLnN0eWxlLmJvcmRlckJvdHRvbSA9ICcycHggc29saWQgYmxhY2snO1xuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgcHJvamVjdEJ0bnMuZm9yRWFjaChidG4gPT4ge1xuICAgICAgICAgICAgICAgIGJ0bi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2RmZGFkYSdcbiAgICAgICAgICAgICAgICBidG4uc3R5bGUuZm9udFNpemUgPSAnMTJweCc7XG4gICAgICAgICAgICAgICAgYnRuLnN0eWxlLmZvbnRXZWlnaHQgPSAnNDAwJztcbiAgICAgICAgICAgICAgICBidG4uc3R5bGUuYm9yZGVyQm90dG9tID0gJzJweCBzb2xpZCBibGFjayc7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcbiAgICAgICAgICAgIGUudGFyZ2V0LnN0eWxlLmZvbnRTaXplID0gJzE0cHgnO1xuICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUuZm9udFdlaWdodCA9ICc4MDAnO1xuICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUuYm9yZGVyQm90dG9tID0gJzJweCBzb2xpZCB3aGl0ZSdcbiAgICAgICAgfSlcbiAgICB9KVxufTsiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJ0b2RheSIsIkRhdGUiLCJkZCIsImdldERhdGUiLCJtbSIsImdldE1vbnRoIiwieXl5eSIsImdldEZ1bGxZZWFyIiwiZ2V0RWxlbWVudEJ5SWQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwibG9jYWxzIiwiVG9kbyIsImNvbnN0cnVjdG9yIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsInByb2plY3QiLCJzdGF0aWMiLCJBcnJheSIsImFsbFRvZG9zTm90ZUxvY2FsU3RvcmFnZSIsImZyb21Mb2NhbFN0b3JhZ2UiLCJhbGxUb2Rvc05vdGVzIiwicHVzaFRvVG9kb05vdGVzIiwiZGVsZXRlRnJvbVRvZG9Ob3RlcyIsImZpbHRlciIsInJlbW92ZU5vdGVGcm9tUHJvamVjdCIsIm5vdGUiLCJwYXJlbnRFbGVtZW50IiwidG9CZURlbGV0ZWRJbmRleCIsImZpbmRJbmRleCIsIngiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwib25sb2FkUmVuZGVyaW5nIiwicHJvamVjdHNOYXZCdG5zIiwicHJvamVjdHNBcnJheSIsInJlbmRlclByb2plY3RzQXJyYXkiLCJpbm5lckhUTUwiLCJmb3JFYWNoIiwibmV3UHJvamVjdE9wdGlvbiIsInRleHRDb250ZW50IiwiaW5zZXJ0QmVmb3JlIiwiY2hpbGRyZW4iLCJ2YWx1ZSIsInByb2plY3ROYXZCdG4iLCJjbGFzc0xpc3QiLCJhZGQiLCJkZWxCdG5Gb3JQcm9qZWN0Iiwib25jbGljayIsImluZGV4T2YiLCJxdWVyeVNlbGVjdG9yQWxsIiwidG9kbyIsInNsaWNlIiwicmVuZGVyIiwiQWRkVG9Qcm9qZWN0IiwiTmV3VG9kbyIsIm5ld1RvZG9EaXYiLCJwcm9qZWN0TmFtZURpdiIsImRlbE5vdGVCdG4iLCJlZGl0Tm90ZUJ0biIsImFwcGVuZCIsImRpdkJvcmRlckNvbG9yRnJvbVByaW9yaXR5IiwiYm94U2hhZG93Iiwic2hvd01vZGFsIiwiZWRpdFRpdGxlIiwiZWRpdERlc2NyaXB0aW9uIiwiZWRpdERhdGUiLCJvcHRpb24iLCJjaGVja2VkIiwicHJldmVudERlZmF1bHQiLCJlZGl0UHJpb3JpdHlDaGVja2VkIiwiYmFja2dyb3VuZENvbG9yIiwiY2xpY2siLCJjbG9zZSIsImVkaXROb3RlIiwiYmFja2dyb3VuZCIsInBhcnNlIiwiZ2V0SXRlbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJuZXdQcm9qZWN0TmFtZSIsInByb21wdCIsIk5ld1Byb2plY3RUaXRsZSIsIk5ld1Byb2plY3REZXNjcmlwdGlvbiIsImVycm9yTXNnIiwiTmV3UHJvamVjdE5hbWUiLCJwcm9qZWN0QnRucyIsImJ0biIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImJvcmRlckJvdHRvbSIsInByb2plY3ROYXZCdG5Db2xvciIsInByb2plY3RCdG4iLCJ0b2RvRGl2IiwiY29udGFpbnMiLCJkaXNwbGF5IiwicHJvamVjdEJ0bkxhc3RDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJzcGxpdCIsInRvZG9Ob3RlIiwiUHJvamVjdFRvZG9Ob3RlcyIsImNvbG9yIiwidGV4dEFsaWduIiwic2V0VGltZW91dCIsIm5ld1Byb2plY3RJbXBvcnRhbmNlIiwic2VsZWN0ZWRJbmRleCIsInRleHQiLCJwcm9qZWN0TmFtZSIsInNlbGVjdGVkIl0sInNvdXJjZVJvb3QiOiIifQ==
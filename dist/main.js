(()=>{var e={208:(e,t,o)=>{"use strict";o.d(t,{A:()=>s});var r=o(354),n=o.n(r),c=o(314),a=o.n(c)()(n());a.push([e.id,"body{margin:0;display:grid;height:100svh;grid-template:1fr 6fr/1fr 4fr;gap:.1rem}body .appHeader{display:flex;justify-content:center;align-items:center}body .menu{grid-area:2/1/-1/2}body .menu #newTodoNote fieldset{display:flex;flex-direction:column;gap:1rem;border:none}body .allProjects{grid-area:1/2/-1/-1}body .allProjects .allProjectsHeader .projectsNavBtns{display:flex;justify-content:flex-start;align-items:center}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn{border:none;cursor:pointer;height:40px;width:120px;border-radius:12px 12px 0px 0px}body .allProjects .ProjectTodoNotes{height:100%;display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem;padding:1rem}body .allProjects .ProjectTodoNotes .nothingToDoH1{opacity:.3}body .allProjects .ProjectTodoNotes .todoDiv{padding:1rem;position:relative}body .allProjects .ProjectTodoNotes .todoDiv .delNoteBtn{position:absolute;top:2%;right:5%}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,KAAK,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,6BAA6B,CAAC,SAAS,CAAC,gBAAgB,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,WAAW,kBAAkB,CAAC,iCAAiC,YAAY,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,mBAAmB,CAAC,sDAAsD,YAAY,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,wEAAwE,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,+BAA+B,CAAC,oCAAoC,WAAW,CAAC,YAAY,CAAC,2DAA2D,CAAC,QAAQ,CAAC,YAAY,CAAC,mDAAmD,UAAU,CAAC,6CAA6C,YAAY,CAAC,iBAAiB,CAAC,yDAAyD,iBAAiB,CAAC,MAAM,CAAC,QAAQ",sourcesContent:["body{margin:0;display:grid;height:100svh;grid-template:1fr 6fr/1fr 4fr;gap:.1rem}body .appHeader{display:flex;justify-content:center;align-items:center}body .menu{grid-area:2/1/-1/2}body .menu #newTodoNote fieldset{display:flex;flex-direction:column;gap:1rem;border:none}body .allProjects{grid-area:1/2/-1/-1}body .allProjects .allProjectsHeader .projectsNavBtns{display:flex;justify-content:flex-start;align-items:center}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn{border:none;cursor:pointer;height:40px;width:120px;border-radius:12px 12px 0px 0px}body .allProjects .ProjectTodoNotes{height:100%;display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem;padding:1rem}body .allProjects .ProjectTodoNotes .nothingToDoH1{opacity:.3}body .allProjects .ProjectTodoNotes .todoDiv{padding:1rem;position:relative}body .allProjects .ProjectTodoNotes .todoDiv .delNoteBtn{position:absolute;top:2%;right:5%}"],sourceRoot:""}]);const s=a},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",r=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),r&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),r&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,r,n,c){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);r&&a[d[0]]||(void 0!==c&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=c),o&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=o):d[2]=o),n&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=n):d[4]="".concat(n)),t.push(d))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),c="/*# ".concat(n," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},72:e=>{"use strict";var t=[];function o(e){for(var o=-1,r=0;r<t.length;r++)if(t[r].identifier===e){o=r;break}return o}function r(e,r){for(var c={},a=[],s=0;s<e.length;s++){var l=e[s],i=r.base?l[0]+r.base:l[0],d=c[i]||0,u="".concat(i," ").concat(d);c[i]=d+1;var p=o(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=n(A,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function n(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,n){var c=r(e=e||[],n=n||{});return function(e){e=e||[];for(var a=0;a<c.length;a++){var s=o(c[a]);t[s].references--}for(var l=r(e,n),i=0;i<c.length;i++){var d=o(c[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}c=l}}},659:e=>{"use strict";var t={};e.exports=function(e,o){var r=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(o)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,o)=>{"use strict";e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var r="";o.supports&&(r+="@supports (".concat(o.supports,") {")),o.media&&(r+="@media ".concat(o.media," {"));var n=void 0!==o.layer;n&&(r+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),r+=o.css,n&&(r+="}"),o.media&&(r+="}"),o.supports&&(r+="}");var c=o.sourceMap;c&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},743:()=>{let e=new Date,t=e.getDate(),o=e.getMonth()+1,r=e.getFullYear();t<10&&(t="0"+t),o<10&&(o="0"+o),e=r+"-"+o+"-"+t+"T00:00:00",document.getElementById("date").setAttribute("min",e)}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var c=t[r]={id:r,exports:{}};return e[r](c,c.exports,o),c.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0;var r={};(()=>{"use strict";o.d(r,{s:()=>q,X:()=>k});var e=o(72),t=o.n(e),n=o(825),c=o.n(n),a=o(659),s=o.n(a),l=o(56),i=o.n(l),d=o(540),u=o.n(d),p=o(113),A=o.n(p),m=o(208),y={};y.styleTagTransform=A(),y.setAttributes=i(),y.insert=s().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=u(),t()(m.A,y),m.A&&m.A.locals&&m.A.locals;class f{constructor(e,t,o,r,n){this.title=e,this.description=t,this.dueDate=o,this.priority=r,this.project=n}static allTodosNotes=new Array;static allTodosNoteLocalStorage(e){this.allTodosNotes=e||[]}pushToTodoNotes(){f.allTodosNotes.push({title:this.title,description:this.description,dueDate:this.dueDate,priority:this.priority,project:this.project})}deleteFromTodoNotes(){f.allTodosNotes=f.allTodosNotes.filter((e=>this.title!==e.title&&this.description!==e.description))}}function g(e,t,o,r){document.querySelector(".ProjectTodoNotes").removeChild(e);const n=f.allTodosNotes.findIndex((e=>e.title==t&&e.description==o&&e.project==r));f.allTodosNotes.splice(n,1),localStorage.setItem("AllTodoNotes",JSON.stringify(f.allTodosNotes)),q()}o(743);const h=document.getElementById("projectName"),v=document.querySelector(".projectsNavBtns");let C=[];function j(){v.innerHTML='<button class="projectBtn allTodoNotesFromAllProjects"> All Notes </button>\n                                 <button class="projectBtn Default"> Default project </button>',h.innerHTML='<option value="Default" id="DefaultProjectOption">Default</option>\n                             <option value="newProject">New Project...</option>',C.forEach((e=>{const t=document.createElement("option");t.textContent=e,t.setAttribute("value",e),h.insertBefore(t,h.children[0]),h.value=t.value;const o=document.createElement("button");o.textContent=`${e}`,o.classList.add("projectBtn",`${e}`);const r=document.createElement("button");r.textContent="X",o.appendChild(r),v.appendChild(o),r.onclick=()=>{v.removeChild(o),C.splice(C.indexOf(e),1),localStorage.setItem("projectsArray",JSON.stringify(C)),document.querySelectorAll(`.todoDiv.${e}`).forEach((e=>{g(e)})),j(),k(),q(),location.reload()},k()}))}function N(e){'<h1 class="nothingToDoH1"> nothing To Do... </h1>'==document.querySelector(".ProjectTodoNotes").innerHTML&&(document.querySelector(".ProjectTodoNotes").innerHTML="");const t=document.createElement("div");t.classList.add("todoDiv",`${e.project}`);const o=document.createElement("h1");o.textContent=e.title;const r=document.createElement("p");r.textContent=e.description;const n=document.createElement("div");n.textContent="Due Date: "+e.dueDate;const c=document.createElement("div");c.textContent="Priority: "+e.priority;const a=document.createElement("div");a.textContent="Project Name: "+e.project;const s=document.createElement("button");s.classList.add("delNoteBtn"),s.textContent="Delete Note";const l=document.createElement("button");l.classList.add("editNoteBtn"),l.textContent="Edit Todo",t.append(l,s,o,r,n,c,a);let i="";switch(e.priority){case"Normal":i="black";break;case"No hurry":i="green";break;case"Super important":i="red"}t.style.boxShadow=`1px 1px 4px 1px ${i}`,s.onclick=()=>{g(t,o.textContent,r.textContent,e.project)},l.onclick=()=>{!function(e,t,o,r,n,c){document.querySelector(".editDialog").showModal();const a=document.querySelector("#editTitle");a.value=e;const s=document.querySelector("#editDescription");s.value=t;const l=document.querySelector("#editDate");l.value=o,document.querySelectorAll('#editTodoNote input[type="radio"]').forEach((e=>{e.value==r&&(e.checked=!0)})),document.querySelector(".editProjectBtn").onclick=o=>{o.preventDefault(),g(c,e,t,n);const r=document.querySelector('#editTodoNote input[type="radio"]:checked').value;new f(a.value,s.value,l.value,r,n).pushToTodoNotes(),localStorage.setItem("AllTodoNotes",JSON.stringify(f.allTodosNotes)),q(),"white"!=document.querySelector(".allTodoNotesFromAllProjects").style.backgroundColor&&document.querySelector(`.${n}`).click(),document.querySelector(".editDialog").close()}}(o.textContent,r.textContent,e.dueDate,e.priority,e.project,t)},document.querySelector(".ProjectTodoNotes").appendChild(t),document.querySelector(".ProjectTodoNotes").style.background="white"}C=JSON.parse(localStorage.getItem("projectsArray"))?JSON.parse(localStorage.getItem("projectsArray")):[],j(),h.addEventListener("change",(e=>{if("newProject"==e.target.value){const e=prompt("enter project name: ");C.push(e),localStorage.setItem("projectsArray",JSON.stringify(C)),j()}}));const b=document.getElementById("title"),T=document.getElementById("description"),x=(document.querySelector("#date"),document.querySelector(".addNewProjectBtn"),document.querySelector(".errorMsg")),S=document.querySelector(".addNewProjectBtn"),B=document.getElementById("title"),P=document.getElementById("description"),D=document.querySelector("#date"),E=document.querySelector("#projectName");function k(){!function(){const e=document.querySelectorAll(".projectBtn");e.forEach((t=>{t.style.backgroundColor="#dfdada",t.style.fontSize="12px",t.style.fontWeight="400",t.style.borderBottom="2px solid black",t.addEventListener("click",(t=>{e.forEach((e=>{e.style.backgroundColor="#dfdada",e.style.fontSize="12px",e.style.fontWeight="400",e.style.borderBottom="2px solid black"})),t.target.style.backgroundColor="white",t.target.style.fontSize="14px",t.target.style.fontWeight="800",t.target.style.borderBottom="2px solid white"}))}))}(),document.querySelectorAll(".projectBtn").forEach((e=>{e.onclick=()=>{document.querySelectorAll(".todoDiv").forEach((t=>{if(e.classList.contains("allTodoNotesFromAllProjects"))return document.querySelector(".ProjectTodoNotes").innerHTML="",f.allTodosNotes.forEach(((e,t)=>{N(f.allTodosNotes[t])})),void(t.style.display="block");const o=e.className.split(" ").slice(-1)[0];document.querySelectorAll(`div.${o}`).forEach((e=>{e.style.display="block"})),t.classList.contains(`${o}`)||(t.style.display="none")}))}}))}function q(){const e=document.querySelector(".ProjectTodoNotes");e.innerHTML="",f.allTodosNoteLocalStorage(JSON.parse(localStorage.getItem("AllTodoNotes"))),0==f.allTodosNotes.length?(e.style.background="no-repeat url('./img/pending.svg') center",e.innerHTML='<h1 class="nothingToDoH1"> nothing To Do... </h1>'):(e.style.background="white",e.innerHTML=""),f.allTodosNotes.forEach(((e,t)=>{N(f.allTodosNotes[t])}))}S.addEventListener("click",(e=>{if(e.preventDefault(),x.style.color="red",x.style.textAlign="center",!(""==b.value?(x.textContent="please enter title",setTimeout((()=>{x.textContent=""}),1e3),0):""!=T.value||(x.textContent="please enter description",setTimeout((()=>{x.textContent=""}),1e3),0)))return;const t=document.querySelector('input[name="priority"]:checked').value;new f(B.value,P.value,D.value,t,E.options[E.selectedIndex].text).pushToTodoNotes(),localStorage.setItem("AllTodoNotes",JSON.stringify(f.allTodosNotes)),N(f.allTodosNotes[f.allTodosNotes.length-1]),document.querySelector(`.${projectName.value}`).click(),B.value="",P.value="",document.querySelector("#normal").checked=!0,k()})),q(),k(),document.getElementById("DefaultProjectOption").selected=!0})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{var e={208:(e,t,o)=>{"use strict";o.d(t,{A:()=>a});var r=o(354),n=o.n(r),c=o(314),l=o.n(c)()(n());l.push([e.id,"body{font-size:14px;margin:0;display:grid;height:100svh;grid-template:1fr 6fr/1fr 4fr;gap:.1rem}body .appHeader{display:flex;justify-content:center;align-items:center;padding:.5rem;text-shadow:2px 2px 4px blue}body .menu{position:relative;grid-area:2/1/-1/2;padding:1rem}body .menu .errorMsg{position:absolute;top:60px}body .menu #newTodoNote fieldset{display:flex;flex-direction:column;gap:1rem;border:none}body .allProjects{grid-area:1/2/-1/-1}body .allProjects .allProjectsHeader .projectsNavBtns{display:flex;justify-content:flex-start;align-items:center}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn{border:none;cursor:pointer;height:40px;width:120px;border-radius:12px 12px 0px 0px;position:relative}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn .delBtnForProject{position:absolute;top:10%;right:5%;border-radius:30%}body .allProjects .editNoteModal .editDialog #editTodoNoteForm>*>div:not(.input:has([type=radio])){display:flex;flex-direction:column}body .allProjects .ProjectTodoNotes{height:100%;display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem;padding:1rem}body .allProjects .ProjectTodoNotes .nothingToDoH1{opacity:.3}body .allProjects .ProjectTodoNotes .todoDiv{padding:1rem;position:relative}body .allProjects .ProjectTodoNotes .todoDiv .delNoteBtn{position:absolute;top:2%;right:5%}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,KAAK,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,6BAA6B,CAAC,SAAS,CAAC,gBAAgB,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,aAAa,CAAC,4BAA4B,CAAC,WAAW,iBAAiB,CAAC,kBAAkB,CAAC,YAAY,CAAC,qBAAqB,iBAAiB,CAAC,QAAQ,CAAC,iCAAiC,YAAY,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,mBAAmB,CAAC,sDAAsD,YAAY,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,wEAAwE,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,+BAA+B,CAAC,iBAAiB,CAAC,0FAA0F,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,mGAAmG,YAAY,CAAC,qBAAqB,CAAC,oCAAoC,WAAW,CAAC,YAAY,CAAC,2DAA2D,CAAC,QAAQ,CAAC,YAAY,CAAC,mDAAmD,UAAU,CAAC,6CAA6C,YAAY,CAAC,iBAAiB,CAAC,yDAAyD,iBAAiB,CAAC,MAAM,CAAC,QAAQ",sourcesContent:["body{font-size:14px;margin:0;display:grid;height:100svh;grid-template:1fr 6fr/1fr 4fr;gap:.1rem}body .appHeader{display:flex;justify-content:center;align-items:center;padding:.5rem;text-shadow:2px 2px 4px blue}body .menu{position:relative;grid-area:2/1/-1/2;padding:1rem}body .menu .errorMsg{position:absolute;top:60px}body .menu #newTodoNote fieldset{display:flex;flex-direction:column;gap:1rem;border:none}body .allProjects{grid-area:1/2/-1/-1}body .allProjects .allProjectsHeader .projectsNavBtns{display:flex;justify-content:flex-start;align-items:center}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn{border:none;cursor:pointer;height:40px;width:120px;border-radius:12px 12px 0px 0px;position:relative}body .allProjects .allProjectsHeader .projectsNavBtns button.projectBtn .delBtnForProject{position:absolute;top:10%;right:5%;border-radius:30%}body .allProjects .editNoteModal .editDialog #editTodoNoteForm>*>div:not(.input:has([type=radio])){display:flex;flex-direction:column}body .allProjects .ProjectTodoNotes{height:100%;display:grid;grid-template-columns:repeat(auto-fill, minmax(300px, 1fr));gap:1rem;padding:1rem}body .allProjects .ProjectTodoNotes .nothingToDoH1{opacity:.3}body .allProjects .ProjectTodoNotes .todoDiv{padding:1rem;position:relative}body .allProjects .ProjectTodoNotes .todoDiv .delNoteBtn{position:absolute;top:2%;right:5%}"],sourceRoot:""}]);const a=l},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",r=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),r&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),r&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,r,n,c){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(l[s]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);r&&l[d[0]]||(void 0!==c&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=c),o&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=o):d[2]=o),n&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=n):d[4]="".concat(n)),t.push(d))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),c="/*# ".concat(n," */");return[t].concat([c]).join("\n")}return[t].join("\n")}},72:e=>{"use strict";var t=[];function o(e){for(var o=-1,r=0;r<t.length;r++)if(t[r].identifier===e){o=r;break}return o}function r(e,r){for(var c={},l=[],a=0;a<e.length;a++){var s=e[a],i=r.base?s[0]+r.base:s[0],d=c[i]||0,u="".concat(i," ").concat(d);c[i]=d+1;var p=o(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=n(A,r);r.byIndex=a,t.splice(a,0,{identifier:u,updater:m,references:1})}l.push(u)}return l}function n(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,n){var c=r(e=e||[],n=n||{});return function(e){e=e||[];for(var l=0;l<c.length;l++){var a=o(c[l]);t[a].references--}for(var s=r(e,n),i=0;i<c.length;i++){var d=o(c[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}c=s}}},659:e=>{"use strict";var t={};e.exports=function(e,o){var r=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(o)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,o)=>{"use strict";e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var r="";o.supports&&(r+="@supports (".concat(o.supports,") {")),o.media&&(r+="@media ".concat(o.media," {"));var n=void 0!==o.layer;n&&(r+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),r+=o.css,n&&(r+="}"),o.media&&(r+="}"),o.supports&&(r+="}");var c=o.sourceMap;c&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},743:()=>{let e=new Date,t=e.getDate(),o=e.getMonth()+1,r=e.getFullYear();t<10&&(t="0"+t),o<10&&(o="0"+o),e=r+"-"+o+"-"+t,document.getElementById("date").setAttribute("min",e),document.getElementById("editDate").setAttribute("min",e)}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var c=t[r]={id:r,exports:{}};return e[r](c,c.exports,o),c.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0;var r={};(()=>{"use strict";o.d(r,{s:()=>q,X:()=>D});var e=o(72),t=o.n(e),n=o(825),c=o.n(n),l=o(659),a=o.n(l),s=o(56),i=o.n(s),d=o(540),u=o.n(d),p=o(113),A=o.n(p),m=o(208),y={};y.styleTagTransform=A(),y.setAttributes=i(),y.insert=a().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=u(),t()(m.A,y),m.A&&m.A.locals&&m.A.locals;class g{constructor(e,t,o,r,n,c,l){this.title=e,this.description=t,this.dueDate=o,this.priority=r,this.project=n,this.checkBoxInputValue=[],this.checkBoxCheckedArray=[]}static allTodosNotes=[];static allTodosNoteLocalStorage(e){this.allTodosNotes=e||[]}pushToTodoNotes(){g.allTodosNotes.push({title:this.title,description:this.description,dueDate:this.dueDate,priority:this.priority,project:this.project,checkBoxInputValue:this.checkBoxInputValue,checkBoxCheckedArray:this.checkBoxCheckedArray})}static deleteFromTodoNotes(){g.allTodosNotes=g.allTodosNotes.filter((e=>this.title!==e.title&&this.description!==e.description))}}function h(e,t,o,r){for(;e.parentElement==document.querySelector(".ProjectTodoNotes");)document.querySelector(".ProjectTodoNotes").removeChild(e);const n=g.allTodosNotes.findIndex((e=>e.title==t&&e.description==o&&e.project==r));g.allTodosNotes.splice(n,1),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)),q()}o(743);const f=document.getElementById("projectName"),C=document.querySelector(".projectsNavBtns");let v=[];function x(){C.innerHTML='<button class="projectBtn allTodoNotesFromAllProjects"> All Notes </button>\n                                 <button class="projectBtn Default"> Default project </button>',f.innerHTML='<option value="Default" id="DefaultProjectOption">Default</option>\n                             <option value="newProject">New Project...</option>',v.forEach((e=>{const t=document.createElement("option");t.textContent=e,t.setAttribute("value",e),f.insertBefore(t,f.children[0]),f.value=t.value;const o=document.createElement("button");o.textContent=`${e}`,o.classList.add("projectBtn",`${e}`);const r=document.createElement("button");r.classList.add("delBtnForProject"),r.textContent="x",o.appendChild(r),C.appendChild(o),r.onclick=()=>{document.querySelector(".confirmDeleteProject").showModal(),document.querySelector(".confirmDeletebtn").onclick=t=>{t.preventDefault(),C.removeChild(o),v.splice(v.indexOf(e),1),localStorage.setItem("projectsArray",JSON.stringify(v)),document.querySelectorAll(`.todoDiv.${e}`).forEach((e=>{const t=e.querySelector(".noteTitle").innerHTML,o=e.querySelector(".noteDescription").innerHTML,r=e.querySelector(".noteProjectName").innerHTML.slice(14);h(e,t,o,r)})),document.querySelector(".confirmDeleteProject").close(),x(),D(),q()},document.querySelector(".cancelDeleteProject").onclick=()=>document.querySelector(".confirmDeleteProject").close()},D()}))}function N(e){'<h1 class="nothingToDoH1"> nothing To Do... </h1>'==document.querySelector(".ProjectTodoNotes").innerHTML&&(document.querySelector(".ProjectTodoNotes").innerHTML="");const t=document.createElement("div");t.classList.add("todoDiv",`${e.project}`);const o=document.createElement("h1");o.classList.add("noteTitle"),o.textContent=e.title;const r=document.createElement("p");r.classList.add("noteDescription"),r.textContent=e.description;const n=document.createElement("div");n.textContent="Due Date: "+e.dueDate;const c=document.createElement("div");c.textContent="Priority: "+e.priority;const l=document.createElement("div");l.classList.add("noteProjectName"),l.textContent="Project Name: "+e.project;const a=document.createElement("button");a.className="delNoteBtn btn btn-primary",a.textContent="Delete Note";const s=document.createElement("button");s.className="editNoteBtn btn btn-primary",s.textContent="Edit Note";const i=document.createElement("button");i.className="addCheckboxbtn btn btn-primary",i.textContent="add CheckBox";const d=document.createElement("div");d.classList.add("checkBoxDivBox"),t.append(s,a,o,r,n,c,l,d,i),e.checkBoxInputValue.length>0&&e.checkBoxInputValue.forEach((function(t,o){const r=document.createElement("div"),n=document.createElement("input");n.setAttribute("type","checkbox");const c=document.createElement("input");c.value=t;let l=c.value;c.setAttribute("type","text"),g.allCheckBoxes=JSON.parse(localStorage.getItem("allCheckBoxes")),"checked"==e.checkBoxCheckedArray[o]&&(n.click(),n.classList.add("checked"),c.setAttribute("disabled","true"));const a=document.createElement("button");a.textContent="x",r.append(n,c,a),d.appendChild(r),a.onclick=t=>{e.checkBoxInputValue.splice(e.checkBoxInputValue.indexOf(t.target.previousSibling.value),1),g.deleteFromTodoNotes(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)),t.target.parentNode.remove()},c.onkeyup=t=>{g.deleteFromTodoNotes(e),e.checkBoxInputValue[e.checkBoxInputValue.indexOf(l)]=t.target.value,l=t.target.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes))},n.addEventListener("change",(t=>{n.classList.contains("checked")?(n.classList.remove("checked"),c.removeAttribute("disabled","true"),g.deleteFromTodoNotes(e),e.checkBoxCheckedArray[Array.from(t.target.parentElement.parentElement.children).indexOf(t.target.parentNode)]=t.target.classList.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes))):(n.classList.add("checked"),n.nextSibling.setAttribute("disabled","true"),g.deleteFromTodoNotes(e),e.checkBoxCheckedArray[Array.from(t.target.parentElement.parentElement.children).indexOf(t.target.parentNode)]=t.target.classList.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)))}))}));let u="";switch(e.priority){case"Normal":u="black";break;case"No hurry":u="green";break;case"Super important":u="red"}t.style.boxShadow=`1px 1px 4px 1px ${u}`,a.onclick=()=>{h(t,o.textContent,r.textContent,e.project)},s.onclick=()=>{!function(e,t,o,r,n,c){document.querySelector(".editDialog").showModal();const l=document.querySelector("#editTitle");l.value=e;const a=document.querySelector("#editDescription");a.value=t;const s=document.querySelector("#editDate");s.value=o,document.querySelectorAll('#editTodoNote input[type="radio"]').forEach((e=>{e.value==r&&(e.checked=!0)})),document.querySelector(".cancelEditBtn").onclick=e=>{e.preventDefault(),document.querySelector(".editDialog").close()},document.querySelector(".editProjectBtn").onclick=o=>{o.preventDefault(),h(c,e,t,n);const r=document.querySelector('#editTodoNoteForm input[type="radio"]:checked').value;new g(l.value,a.value,s.value,r,n).pushToTodoNotes(),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)),q(),"white"!=document.querySelector(".allTodoNotesFromAllProjects").style.backgroundColor&&document.querySelector(`.${n}`).click(),document.querySelector(".editDialog").close()}}(o.textContent,r.textContent,e.dueDate,e.priority,e.project,t)},i.onclick=()=>{const t=document.createElement("div"),o=document.createElement("input");o.setAttribute("type","checkbox");const r=document.createElement("input");r.setAttribute("type","text");const n=document.createElement("button");n.textContent="x",t.append(o,r,n),d.appendChild(t),r.onkeyup=t=>{let o=t.target.value;g.deleteFromTodoNotes(e),e.checkBoxInputValue.push(t.target.value),o=t.target.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)),t.target.onkeyup=t=>{g.deleteFromTodoNotes(e),e.checkBoxInputValue[e.checkBoxInputValue.indexOf(o)]=t.target.value,o=t.target.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes))}},n.onclick=t=>{e.checkBoxInputValue.splice(e.checkBoxInputValue.indexOf(t.target.previousSibling.value),1),g.deleteFromTodoNotes(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)),t.target.parentNode.remove()},o.addEventListener("change",(t=>{o.classList.contains("checked")?(o.classList.remove("checked"),r.removeAttribute("disabled","true"),g.deleteFromTodoNotes(e),console.log(e),e.checkBoxCheckedArray[Array.from(t.target.parentElement.parentElement.children).indexOf(t.target.parentNode)]=t.target.classList.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes))):(o.classList.add("checked"),o.nextSibling.setAttribute("disabled","true"),g.deleteFromTodoNotes(e),console.log(e),e.checkBoxCheckedArray[Array.from(t.target.parentElement.parentElement.children).indexOf(t.target.parentNode)]=t.target.classList.value,new g(e),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)))}))},document.querySelector(".ProjectTodoNotes").appendChild(t),document.querySelector(".ProjectTodoNotes").style.background="white"}v=JSON.parse(localStorage.getItem("projectsArray"))?JSON.parse(localStorage.getItem("projectsArray")):[],x(),f.addEventListener("change",(e=>{if("newProject"==e.target.value){const e=prompt("enter project name: ");v.push(e),localStorage.setItem("projectsArray",JSON.stringify(v)),x()}}));const b=document.getElementById("title"),T=document.getElementById("description"),B=(document.querySelector("#date"),document.querySelector(".addNewProjectBtn"),document.querySelector(".errorMsg")),j=document.querySelector(".addNewProjectBtn"),S=document.getElementById("title"),k=document.getElementById("description"),P=document.querySelector("#date"),E=document.querySelector("#projectName");function D(){!function(){const e=document.querySelectorAll(".projectBtn");e.forEach((t=>{t.style.backgroundColor="#dfdada",t.style.fontSize="12px",t.style.fontWeight="400",t.style.borderBottom="2px solid black",t.addEventListener("click",(t=>{e.forEach((e=>{e.style.backgroundColor="#dfdada",e.style.fontSize="12px",e.style.fontWeight="400",e.style.borderBottom="2px solid black"})),t.target.style.backgroundColor="white",t.target.style.fontSize="14px",t.target.style.fontWeight="800",t.target.style.borderBottom="2px solid white"}))}))}(),document.querySelectorAll(".projectBtn").forEach((e=>{e.onclick=()=>{document.querySelectorAll(".todoDiv").forEach((t=>{if(e.classList.contains("allTodoNotesFromAllProjects"))return document.querySelector(".ProjectTodoNotes").innerHTML="",g.allTodosNotes.forEach(((e,t)=>{N(g.allTodosNotes[t])})),void(t.style.display="block");const o=e.className.split(" ").slice(-1)[0];document.querySelectorAll(`div.${o}`).forEach((e=>{e.style.display="block"})),t.classList.contains(`${o}`)||(t.style.display="none")}))}}))}function q(){const e=document.querySelector(".ProjectTodoNotes");e.innerHTML="",g.allTodosNoteLocalStorage(JSON.parse(localStorage.getItem("AllTodoNotes"))),0==g.allTodosNotes.length?(e.style.background="no-repeat url('./img/pending.svg') center",e.innerHTML='<h1 class="nothingToDoH1"> nothing To Do... </h1>'):(e.style.background="white",e.innerHTML=""),g.allTodosNotes.forEach(((e,t)=>{N(g.allTodosNotes[t])}))}j.addEventListener("click",(e=>{if(e.preventDefault(),B.style.color="red",B.style.textAlign="center",!(""==b.value?(B.textContent="-- please enter title --",setTimeout((()=>{B.textContent=""}),1e3),0):""!=T.value||(B.textContent="-- please enter description --",setTimeout((()=>{B.textContent=""}),1e3),0)))return;const t=document.querySelector('input[name="priority"]:checked').value;new g(S.value,k.value,P.value,t,E.options[E.selectedIndex].text).pushToTodoNotes(),localStorage.setItem("AllTodoNotes",JSON.stringify(g.allTodosNotes)),N(g.allTodosNotes[g.allTodosNotes.length-1]),document.querySelector(`.${projectName.value}`).click(),S.value="",k.value="",document.querySelector("#normal").checked=!0,D()})),q(),D(),document.getElementById("DefaultProjectOption").selected=!0})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,